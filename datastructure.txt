Binary Tree
	Interview Skill
		#1: What do I already know:
			Tree is also a graph, an acyclic connected graph
	Height
		the largest # of edges in a path from a leaf node to a target node 
	Depth
		Start from root, root node has depth 0;
		Then the child of root node has depth 1, and so on;
	Balanced Binary Tree
		the left and right subtrees of every node differ in height by no more 			     
                than 1
	Recursive Approach
		Policy #1: What need to happen just in "Single Node"
		Policy #2: Base Case

Trie(prefix tree)
	A variant of n-ary tree(each node has no more than n children) in which characters are stored at each node. Each path down the tree may represent a word. 
	A node in a trie could have anywhere from 1 through ALPHABET_SIZE + 1. 
	
Cache
	Store date to speed up the same future requests
		may be a previous computation or a redundant copy of date

Least Recently Used (LRU) cache
	Data Structure Implementations:
		1. Queue, suing a double linked list. 
		2. A Hash, with page number as key and address of the corresponding queue node as value.
	Paging
		a memory management scheme
		break physical memory into fixed-size blocks called frames and logical memory into blocks of same size called pages.
	Reference a page
		If the page is in the memory: 
			detach the node of the list and bring it to the front of the queue.
		else:
			add a new node to the front of the queue
			update the corresponding node address in the hash
			if the queue is full
				remove a node from the rear of the queue
				add the new node to the front of the queue

Common Sorting Algorithms
	Merge Sort: 
		Runtime O(n log(n)) average and worst case
		Memory: depends
	Quick Sort:
		Runtime O(n log(n)) average, O(n^2) worst case
		Memory: O(log(n))

Topological Sorting
	A linear ordering version of Directed Acyclic Graph(DAG)

Integer.MAX_VALUE: 2^31 - 1

Integer.MIN_VALUE: -2^31

Arrays
	Arrays.equal(char[] a, char[] b): Returns true if the two specified arrays of bytes are equal to one another
	Arrays.sort(char[] a): return type "static void"
	Arrays.asList(T...a): static <T> List<T>
		return a fixed-size list backed by the specified array.  

Strings
	toCharArray(): Converts this string to a new character array
	toString(): This object (which is already a string) is itself return
	valueOf(char c): Returns the string representation of the char argument 
	values(): Return a Collection view of the values contained in this map

Backtracking
	Keys
		1. Choice: A decision point in the recursion
		2. Constraints: cannot do a decision 
		3. Goal: final result

Sliding Window
	"start" and "end" two pointers for the two edge of the window
	two while loops: 
		1st: check if the right pointer move out of current bound, new position new update(increase value)
		2nd: inside 1st one, move the left pointer to right to the [left, right] sliding window. new position new update(increase)
	find a good [left, right], update res = max[res, current window length]
	move the right pointer to right, explore new window

HashMap
	contains: T O(1)
	get(): Returns the value to which the specified key is mapped, or null if no mapping

Difference between break and continue
	break: end the loop immediately
	continue: skip the current iteration of the loop

Binary Search O(log(n))
	cut the elements is half, if target==mid elements, return; else, recursively search in the first half and second half.

Dynamic Programming
	Top down approach

Heap
	tree-based data structure, an almost complete tree
	max heap: for any given node C, if P is a parent node of C, then the value of P >= C; min heap vice versa
	Priority Queue: implemented by heap
			the highest/lowest priority element is always stored as a root, but itself is not a sorted structure
			good for repeatedly remove the object with the highest.
	Example:
		Tree Representation
						100
				19				36
			17		3		25		1
		2		7
		Array Representation
		100 19 36 17 3 25 1 2 7

class Collections
	this class consists exclusively of static methods that operate or return collections.
	Collections.sort(List<T> list)
		sort the specified list into ascending order, according to the natural ordering(type) of its elements


